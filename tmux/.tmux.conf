#                               _
#  ___ _ __   ___ _ __ ___   __| |
# / __| '_ \ / __| '_ ` _ \ / _` |
# \__ | |_) | (__| | | | | | (_| |
# |___| .__/ \___|_| |_| |_|\__,_|
#     |_|
# Created by: spcmd
# http://spcmd.github.io
# https://github.com/spcmd

# ----------------------------
# Basic Settings
# ----------------------------

# Set prefix key
unbind C-b
set -g prefix M-x
bind M-a send-prefix

# Enable 256 color (works only with X)
#set-option -g default-terminal "rxvt-unicode-256color"

# Escape key delay
set -s escape-time 0

# Window index (start numbering at)
set -g base-index 1

# Auto renumber windows
set -g renumber-windows on

# Mouse support
#set -g mouse on
#set -g mouse-resize-pane on
#set -g mouse-select-pane on
#set -g mouse-select-window on

# ----------------------------
# --- Window/Pane settings
# ----------------------------

# border colors
set -g pane-border-fg white
set -g pane-border-bg black
set -g pane-active-border-fg white
set -g pane-active-border-bg green

# rename windows based on the command
#set-window-option -g automatic-rename off

# ----------------------------
# --- Statusbar
# ----------------------------
set -g status-position top
set -g status-interval 60       # refresh rate in seconds
set -g status-right-length 65   # length in characters
set -g status-right "Mail: #(cat ~/.mutt/newmail_count) | Vol: #(amixer -M get Master | awk '/%/{gsub( /[][%]/,\"\" );print $4}') | Bat: #(cat /sys/class/power_supply/BAT0/capacity) (#(cat /sys/class/power_supply/BAT0/status)) | #(date +'%a %b %d, %H:%M') "

# statusbar color
set -g status-fg white
set -g status-bg colour10
#set -g status-attr bright

# window title colors
set-window-option -g window-status-fg white
#set-window-option -g window-status-bg default
#set-window-option -g window-status-attr bright
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg colour9
#set-window-option -g window-status-current-attr bright

# ----------------------------
# --- Key bindings
# ----------------------------

# Set Vim keybindings
set -g status-keys vi
set-window-option -g mode-keys vi

# Cycle windows/panes (no prefix)
bind-key -n M-k select-pane -t :.-      # prev pane
bind-key -n M-j select-pane -t :.+      # next pane
bind-key -n M-h select-window -t :-     # prev window
bind-key -n M-l select-window -t :+     # next window

# Swap windows/panes (no prefix)
bind-key -n M-p swap-pane -U
bind-key -n M-o swap-pane -D
bind-key -n M-- swap-window -t +1
bind-key -n M-. swap-window -t -1

# Maximize pane
bind-key m resize-pane -Z

# Resize panes
bind-key -r j resize-pane -D 1
bind-key -r k resize-pane -U 1
bind-key -r h resize-pane -L 1
bind-key -r l resize-pane -R 1

# Split panes
bind-key Enter split-window -h          # vertical
bind-key Space split-window -v          # horizontal

# Move pane to separate window
bind-key w break-pane

# Switch layouts
bind-key -n M-C-Space next-layout

# New window/pane
bind-key t new-window

# Detach
bind-key q detach

# Kill window/pane
bind-key d kill-pane
bind-key D kill-window

# Copy/Paste
bind-key Escape copy-mode                           # enter copy mode
bind-key -t vi-copy Escape cancel                   # exit copy mode; or hit q
bind-key -t vi-copy v begin-selection               # begin visual mode
bind-key -t vi-copy V select-line                   # visual line
bind-key -t vi-copy y copy-pipe "xsel -i -p -b"     # yank (to tmux buffer + x selection)
bind-key -t vi-copy b rectangle-toggle              # visual block toggle (press 'Space' to activate)
bind-key p paste-buffer                             # paste
bind-key P choose-buffer                            # choose which buffer to paste

# Rename window
bind-key A command-prompt "rename-window '%%'"

# Find window
bind-key / command-prompt "find-window '%%'"

# Reload config
bind-key r source-file ~/.tmux.conf \; display-message "Config reloaded"

# List/Select session
bind-key C-s choose-tree

# List/Select windows
bind-key C-w choose-window

# Run shell command
bind-key ! command-prompt -p "run shell command in a new window:" "new-window '%%'"

# Spotify
bind-key s run "dbus-send --type=method_call --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause"
bind-key left run "dbus-send --type=method_call --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous"
bind-key right run "dbus-send --type=method_call --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next"

# Spotify Control (read command prevents closing the window)
bind-key S split-window -v -p 50 "sc -I; read"

# Spotymenu
bind-key b split-window -v -p 50  "spotymenu" \; swap-pane -U

# fzf-run
bind-key a new-window "fzf-run"

# fzf-open
bind-key o split-window -h -p 50 \; send-keys 'fzf-vim-open' 'Enter'

# Volume
bind-key up run "amixer sset Master 2%+ > /dev/null" \; refresh-client -S
bind-key down run "amixer sset Master 2%- /dev/null" \; refresh-client -S

# Check gmail
bind-key M display-message "tmux mailchecker: Checking mail..." \; run "gmailcheck.sh"
