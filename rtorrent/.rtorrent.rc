#                                      _
#         ___ _ __   ___ _ __ ___   __| |
#        / __| '_ \ / __| '_ ` _ \ / _` |
#        \__ | |_) | (__| | | | | | (_| |
#        |___| .__/ \___|_| |_| |_|\__,_|
#             |_|
#
#               Created by: spcmd
#           https://github.com/spcmd

# --------------------------------------------------------------------------------------
# rTorrent
# --------------------------------------------------------------------------------------

# Maximum and minimum number of peers to connect to per torrent.
min_peers = 20
max_peers = 200

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = -1
max_peers_seed = -1

# Maximum number of simultanious uploads per torrent.
max_uploads = 50

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 0

# Default directory to save the downloaded torrents.
directory = ~/Downloads

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = ~/.rtorrent-session

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
port_range = 50500-50500

# Start opening ports at a random position within the port range.
port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#check_hash = no

# Set whether the client should try to connect to UDP trackers.
#use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#encryption = require
#encryption = require,require_RC4,allow_incoming,try_outgoing
encryption = allow_incoming,try_outgoing,enable_retry

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
dht = on

# UDP port to use for DHT.
#dht_port = 50500

# Enable peer exchange (for torrents not marked private)
#peer_exchange = yes

# Preallocate files; reduces defragmentation on filesystems.
#system.file_allocate.set = yes

# Set colors
#   Colors: 0 = black 1 = red 2 = green 3 = yellow 4 = blue 5 = magenta 6 = cyan 7 = white
#   Inactive: Deactivated torrent
#   Dead:     Active but can't find seeders
#   Active:   Active and downloading
#   Finished: Download done
#   If the torrent is highlighted (using bold text) you're uploading data

#color_inactive_bg = 3
#color_inactive_fg = 0
#color_active_bg = 4
#color_active_fg = 7
#color_finished_bg = 2
#color_finished_fg = 0
#color_dead_bg = 7
#color_dead_fg = 0

# Notify when a download is finished
method.set_key = event.download.finished,notify_me,"execute=notify-send,\"rTorrent finished downloading\",$d.name="

# --------------------------------------------------------------------------------------
# rTorrent-ps
# --------------------------------------------------------------------------------------

# Set "pyro.extended" to 1 to activate rTorrent-PS features!
# LEAVE THIS AT 0 IF YOU RUN A VANILLA rTorrent!
method.insert = pyro.extended, value|const, 1

# Set "pyro.bin_dir" to the "bin" directory where you installed the pyrocore tools!
# Make sure you end it with a "/"; if this is left empty, then the shell's path is searched.
#method.insert = pyro.bin_dir, string|const, "$cat=~/bin/"
method.insert = pyro.bin_dir, string|const, ~/.pyroscope/

# Remove the ".default" if you want to change something (else your changes
# get over-written on update, when you put them into ``*.default`` files).
#import = ~/.pyroscope/rtorrent-pyro.rc.default

# TORQUE: Daemon watchdog schedule
# Must be activated by touching the "~/.pyroscope/run/pyrotorque" file!
# Set the second argument to "-v" or "-q" to change log verbosity.
#schedule = pyro_watchdog,30,300,"pyro.watchdog=~/.pyroscope,"

# Helper method to import specified conf file as a parameter from ~/.pyroscope/ directory.
#method.insert = import.pyro.rc, simple, "import=\"$cat=~/.pyroscope/,$argument.0=\""

# Imports main pyroscope conf file
#import.pyro.rc = "$cat=rtorrent-ps-,\"$system.client_version=\",.rc"

# pyrocore / pyroscope socket
network.scgi.open_local = /tmp/.rtorrent.sock
session.path = ~/.rtorrent-session

# VIEW: Use rtcontrol filter (^X s=KEYWORD, ^X t=TRACKER, ^X f="FILTER")
#method.insert = s,simple|private,"execute.nothrow=rtcontrol,--detach,-qV,\"$cat=*,$argument.0=,*\""
#method.insert = t,simple|private,"execute.nothrow=rtcontrol,--detach,-qV,\"$cat=\\\"alias=\\\",$argument.0=\""
#method.insert = f,simple|private,"execute.nothrow=rtcontrol,--detach,-qV,$argument.0="

# Encryption options (encryption), set to none (default) or any combination of the following: allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
# The example value allows incoming encrypted connections, starts unencrypted outgoing connections but retries with encryption if they fail, preferring plaintext to RC4 encryption after the encrypted handshake
protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Watch directories and autoload torrents for them
branch=pyro.extended=,"schedule = watch_dir_1, 5, 10, \"load.start=~/Downloads/.rtorrent_autoload/*.torrent\""

# -----------------------
#  Views
# -----------------------

# collapse all default views
branch=pyro.extended=,"view.collapsed.toggle=main"
branch=pyro.extended=,"view.collapsed.toggle=name"
branch=pyro.extended=,"view.collapsed.toggle=started"
branch=pyro.extended=,"view.collapsed.toggle=stopped"
branch=pyro.extended=,"view.collapsed.toggle=complete"
branch=pyro.extended=,"view.collapsed.toggle=incomplete"
branch=pyro.extended=,"view.collapsed.toggle=seeding"
branch=pyro.extended=,"view.collapsed.toggle=active"

# view: sort by uploaded data
#view.add = uploadeddata
#branch=pyro.extended=,"view.collapsed.toggle=uploadeddata"
#branch=pyro.extended=,false=,"view.sort_current = uploadeddata,greater=d.up.total="
#branch=pyro.extended=,"view.sort_current = uploadeddata,\"compare=+-,d.throttle_name=,d.up.total=\""
#view.sort = uploadeddata
#branch=pyro.extended=,"schedule = bind_uploadeddata,0,0,\"ui.bind_key=download_list,u,ui.current_view.set=uploadeddata\""

# view: sort by data size
#view.add = datasize
#branch=pyro.extended=,"view.collapsed.toggle=datasize"
#branch=pyro.extended=,false=,"view.sort_current = datasize,greater=d.size_bytes="
#branch=pyro.extended=,"view.sort_current = datasize,\"compare=+-,d.throttle_name=,d.size_bytes=\""
#view.sort = datasize
#branch=pyro.extended=,"schedule = bind_datasize,0,0,\"ui.bind_key=download_list,z,ui.current_view.set=datasize\""

# view: sort by ratio
view.add = ratio
branch=pyro.extended=,"view.collapsed.toggle=ratio"
branch=pyro.extended=,false=,"view.sort_current = ratio,greater=d.ratio="
branch=pyro.extended=,"view.sort_current = ratio,\"compare=+-,d.throttle_name=,d.ratio=\""
view.sort = ratio
branch=pyro.extended=,"schedule = bind_ratio,0,0,\"ui.bind_key=download_list,9,ui.current_view.set=ratio\""

# view: tagged
# <space> = toggle focused item between tagged and untagged (0040 is the <space> key)
# t = show tagged items view
# T = clear all tags
#view.add = tagged
#view.persistent = tagged
#branch=pyro.extended=,view.collapsed.toggle=tagged
#method.insert = view.toggle_visible,simple,"branch=d.views.has=$argument.0=,view.set_not_visible=$argument.0=,view.set_visible=$argument.0="
#method.insert = pyro.view_tagged_clear,simple|private,"view.filter=tagged,false= ;d.multicall2=main,d.views.remove=tagged"
#branch=pyro.extended=,"schedule = bind_tag_toggle,0,0,\"ui.bind_key=download_list,0040,view.toggle_visible=tagged\""
#branch=pyro.extended=,"schedule = bind_tag_clear,0,0,\"ui.bind_key=download_list,T,pyro.view_tagged_clear=\""
#branch=pyro.extended=,"schedule = bind_tag_show,0,0,\"ui.bind_key=download_list,t,ui.current_view.set=tagged\""

# custom views
view.add=comics
view.persistent=comics
view.collapsed.toggle=comics

view.add=ebooks
view.persistent=ebooks
view.collapsed.toggle=ebooks

view.add=tv
view.persistent=tv
view.collapsed.toggle=tv

view.add=movies
view.persistent=movies
view.collapsed.toggle=movies

view.add=flagged
view.persistent=flagged
view.collapsed.toggle=flagged

# --------------------------------------------------------------------
#  Tagging (using a custom shell script which uses pyrocore/rtcontrol)
# --------------------------------------------------------------------

# add tag
method.insert = tag.add,simple,\
    "execute=rtc,--add-tag,$d.name=,$argument.0=;\
    view.set_visible=$argument.0=;\
    print=\"----------------------------------------------------------------------------------------\";\
    print=\"rtcontrol> Set tag: '\",\"$cat=,$argument.0=\",\"' --> \",$d.name=;\
    print=\"----------------------------------------------------------------------------------------\""

# remove tag
method.insert = tag.remove,simple,\
    "execute=rtc,--remove-tag,$d.name=,$argument.0=;\
    d.views.remove=$argument.0=;\
    view.set_not_visible=$argument.0=;\
    print=\"----------------------------------------------------------------------------------------\";\
    print=\"rtcontrol> Removed tag: '\",\"$cat=,$argument.0=\",\"' --> \",$d.name=;\
    print=\"----------------------------------------------------------------------------------------\""

# remove ALL tags
method.insert = tag.removeAll,simple,\
    "execute=rtc,--remove-tag-all,$d.name=,$argument.0=;\
    view.filter=$argument.0=,false=;\
    d.multicall2=main,\
    d.views.remove=$argument.0=;\
    print=\"----------------------------------------------------------------------------------------\";\
    print=\"rtorrent> Removed all: '\",\"$cat=,$argument.0=\",\"' tag\";\
    print=\"----------------------------------------------------------------------------------------\""

# -----------------------
#  Key bindings
# -----------------------

# views
schedule = bind_view.name_q,0,0,"ui.bind_key=download_list,q,ui.current_view.set=name"
schedule = bind_view.name,0,0,"ui.bind_key=download_list,0,ui.current_view.set=name"
schedule = bind_view.started,0,0,"ui.bind_key=download_list,1,ui.current_view.set=started"
schedule = bind_view.complete,0,0,"ui.bind_key=download_list,2,ui.current_view.set=complete"
schedule = bind_view.seeding,0,0,"ui.bind_key=download_list,3,ui.current_view.set=seeding"

schedule = bind_view.tv,0,0,"ui.bind_key=download_list,4,ui.current_view.set=tv"
schedule = bind_view.movies,0,0,"ui.bind_key=download_list,5,ui.current_view.set=movies"
schedule = bind_view.comics,0,0,"ui.bind_key=download_list,6,ui.current_view.set=comics"
schedule = bind_view.ebooks,0,0,"ui.bind_key=download_list,7,ui.current_view.set=ebooks"
schedule = bind_view.flagged,0,0,"ui.bind_key=download_list,8,ui.current_view.set=flagged"

# tagging
schedule = bind_tag_add.comics,0,0,"ui.bind_key=download_list,c,tag.add=comics"
schedule = bind_tag_remove.comics,0,0,"ui.bind_key=download_list,C,tag.remove=comics"

# moves & controls
schedule = bind_collapse,0,0,"ui.bind_key=download_list,*,view.collapsed.toggle="
schedule = bind_start_all,0,0,"ui.bind_key=download_list,S,\"d.multicall2=,d.start=\""
schedule = bind_stop,0,0,"ui.bind_key=download_list,^d,d.stop="
schedule = bind_stop_all,0,0,"ui.bind_key=download_list,D,\"d.multicall2=,d.stop=\""
schedule = bind_delete,0,0,"ui.bind_key=download_list,R,d.erase="
schedule = bind_home,0,0,"ui.bind_key=download_list,g,ui.focus.home="
schedule = bind_end, 0,0,"ui.bind_key=download_list,G,ui.focus.end="
schedule = bind_pgdn, 0,0,"ui.bind_key=download_list,J,ui.focus.pgdn="
schedule = bind_pgup,0,0,"ui.bind_key=download_list,K,ui.focus.pgup="

# -----------------------
#  Other Settings
# -----------------------

# Select name view by default
schedule = set_name_view, 0,0,"ui.current_view.set=name"

# Jump this number of items when using pgdn, pgup keys
ui.focus.page_size.set=3

# Colors & Style
ui.color.alarm.set="red"
ui.color.even.set=""
ui.color.odd.set=""
ui.color.focus.set="reverse"
ui.color.info.set="white"
ui.color.label.set="white"
#ui.color.title.set="white on blue"
#ui.color.footer.set="white on blue"
ui.color.title.set="white on blue"
ui.color.footer.set="white on blue"

ui.color.seeding.set="green"
ui.color.leeching.set="bold bright blue"
ui.color.stopped.set="bright white"
ui.color.incomplete.set="bright yellow"
ui.color.complete.set="bright green"
ui.color.queued.set="cyan"

ui.style.progress.set=2
ui.color.progress0.set="red"
ui.color.progress20.set="bold bright red"
ui.color.progress40.set="yellow"
ui.color.progress60.set="bright yellow"
ui.color.progress80.set="bright green"
ui.color.progress100.set="green"
ui.color.progress120.set="green"
