#                               _
#  ___ _ __   ___ _ __ ___   __| |
# / __| '_ \ / __| '_ ` _ \ / _` |
# \__ | |_) | (__| | | | | | (_| |
# |___| .__/ \___|_| |_| |_|\__,_|
#     |_|
# Created by: spcmd
# http://spcmd.github.io
# https://github.com/spcmd

alias pacins='sudo pacman -S' # install
alias pacinsu='sudo pacman -U' # istall local pkg
alias pacss='pacman -Ss' # search in remote packages
alias pacqs='pacman -Qs' # search in installed packages
alias pacsync='sudo pacman -Syy' # update repo lists
alias pacupd='sudo pacman -Syyu' # update & upgrade
alias pacupg='sudo pacman -Syyu' # update & upgrade
alias paclspkg='pacman -Q' # list installed packages
alias paclsexplicit='pacman -Qqen' # list explicitly installed packages
alias paclsaur='pacman -Qmq' #list AUR and makepkg packages
alias paclsaurver='pacman -Qm' # list AUR and packages with version numbers
alias cdpacpkg='cd /var/cache/pacman/pkg' # change to pacman cache dir
alias cdaurpkg='cd /var/cache/pacman/pkg-aur' # change to yaourt cache dir

#pacman: show package info
pacinfo() {
    if [[ -z $@ ]]; then
        echo "Error! No package name was given."
    else
        pacman -Qi "$@"
    fi
}

# pacman: show package dependencies
pacdep() { pacman -Qi "$@" | grep Depends }

# pacman: show size of the package
pacsize() { pacman -Qi "$@" | grep Size }

# pacman: size of the cache dir
paccachesize() { du -hs /var/cache/pacman }

# pacman: list or search in cache
paccachelist() {

    cache_dir=/var/cache/pacman/pkg
    cache_dir_yaourt=/var/cache/pacman/pkg-yaourt

    # fi $1 is empty, then just list all the packages
    if [[ $1 == "" ]]; then
    echo "--------------------------------------------------------------------------"
    echo "==> Listing $cache_dir:"
         ls -l $cache_dir
    echo "--------------------------------------------------------------------------"
        if [[ -d $cache_dir_yaourt ]]; then
            echo "==> Listing $cache_dir_yaourt:"
            ls -l $cache_dir_yaourt
            echo "--------------------------------------------------------------------------"
        fi
    # if $1 is NOT empty, then it's a search
    else
    echo "--------------------------------------------------------------------------"
    echo "==> Search results for $1 in $cache_dir:"
          ls -l $cache_dir | grep $1

          if [[ -d $cache_dir_yaourt ]]; then
            echo "--------------------------------------------------------------------------"
            echo "==> Search results for $1 in $cache_dir_yaourt:"
            ls -l $cache_dir_yaourt | grep $1
            echo "--------------------------------------------------------------------------"
          fi
    fi
}

# removed orphaned
pacrmo() {
    echo "==> Remove orphaned package(s)"
    sudo pacman -Rns $(pacman -Qdtq)
}

# remove packages
pacrm() {
    echo "==> Remove package(s) with their configuration files and unneeded dependencies"
    sudo pacman -Rns "$@"
}

# switch to the new mirrorlist
pacmirror() {
    echo "==> Use the new pacman mirrorlist as the default mirrorlist and create a backup of the current mirrorlist? (y = yes)"
    read answer_list
    if [[ $answer_list == "y" ]] || [[ $answer_list == "Y" ]]; then
        sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
        sudo mv /etc/pacman.d/mirrorlist.pacnew /etc/pacman.d/mirrorlist
        echo "==> New mirrorlist: done!"
        echo "==> Opening the new mirrorlist for editing."
        sudo vim /etc/pacman.d/mirrorlist
    else
        echo "==> pacmirror stopped. Nothing changed."
    fi
}

# pacman log
# based on: https://bbs.archlinux.org/viewtopic.php?pid=1281605#p1281605
paclog(){
	LOGFILE="/var/log/pacman.log"
	case "$1" in
		-h)	# Show help
		    echo "paclog"
            echo "Usage: paclog [-option]"
            echo ""
            echo "\033[1;34m      -i\033[0m                Show log entries for installed."
            echo "\033[1;34m      -r\033[0m                Show log entries for removed."
            echo "\033[1;34m      -u\033[0m                Show log entries for upgraded."
            echo "\033[1;34m      -d\033[0m                Show log entries for downgraded."
            echo "\033[1;34m      -m\033[0m                Show log entries for messages."
            echo "\033[1;34m      -s <keyword>\033[0m      Search for <keyword> in the log entries."
            echo "\033[1;34m      -h\033[0m                This help."
            echo ""
            echo "Without an option, the \033[1;34mpaclog\033[0m command shows the entire log."
		    ;;
		-i) # Show installed
			grep 'installed' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
		-r) # Show removed
			grep 'removed' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
		-u) # Show upgraded
			grep 'upgraded' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
        -d) # Show downgraded
            grep 'downgraded' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
        -s) # Search in log
			grep -i $2 $LOGFILE | less
		    ;;
		-m) # Show messages
			grep 'ALPM-SCRIPTLET' -B 1 $LOGFILE | less
			;;
		*)  # Show the entire log
		    less $LOGFILE
		esac
}

# locate pac* files
# https://wiki.archlinux.org/index.php/Pacnew_and_Pacsave_files#Locating_.pac.2A_files
pacfilesfinder() {
    echo "==> Listing pac* files in /etc:"
    find /etc -regextype posix-extended -regex ".+\.pac(new|save|orig)" 2> /dev/null
}

# last upgrade date/time
# source: https://bbs.archlinux.org/viewtopic.php?pid=1345525#p1345525
paclastupg() { awk '/upgraded/ {line=$0;} END { $0=line; gsub(/[\[\]]/,"",$0); printf "\033[1;34mPacman > Last Upgraded:\033[0m %s %s\n",$1,$2; exit;}' /var/log/pacman.log }

# checkupdates + filter out ignored packages
paccheck() {
    ignorelist=$(awk '/IgnorePkg.+=/{for(i=1;i<3;i++) $i="";gsub(/^[ \t]+|[ \t]+$/,"");gsub(" ","|");print}' /etc/pacman.conf)
    packages=$(checkupdates | sed -r "/($ignorelist)/d")
    count=$(echo -n "$packages" | wc -l)
    if [[ $count -gt 0 ]]; then
        echo -e "------------\033[1;33mC\033[0m o o o o o o o o"
        echo -e "\033[1;33m$count\033[0m package update(s) available"
        echo -e "------------------------------"
        echo "$packages"
    else
        echo "No package updates available."
    fi
}

# vim: set syntax=sh filetype=sh :
