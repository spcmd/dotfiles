#                               _
#  ___ _ __   ___ _ __ ___   __| |
# / __| '_ \ / __| '_ ` _ \ / _` |
# \__ | |_) | (__| | | | | | (_| |
# |___| .__/ \___|_| |_| |_|\__,_|
#     |_|
# Created by: spcmd
# http://spcmd.github.io
# https://github.com/spcmd

alias cal='cal -m'
alias cal-next='cal -mn 2'
alias hdapm='sudo hdparm -I /dev/sda | grep level'
alias gifview='gifview -aU' #gifsicle gifview: animated and unoptimized by default
#alias sshx='ssh -X -C -c blowfish-cbc,arcfour' # SSH with X (to run GUI apps)

pic-resize(){
    percent=$1
    if [[ -z $percent ]]; then
        percent=50
    fi
    echo "resizing images to ${percent}%"
    for file in *.{jpg,JPG}; do convert $file -resize ${percent}% $file; done
    echo "done resizing images."
}

i3-autorun() {
    echo 'false' > /tmp/i3_autorun
}

# rename files with ascending numbering
renamePhotoAsc() {
    n=1;
    name=$1
    if [[ ! -z $name ]]; then
        for file in *.JPG; do mv "$file" "${name}_$n.jpg" && n=$((n+1)); done
    else
        echo "Error: No name was given."
    fi
}

# neofetch
alias neofetch="neofetch --ascii --ascii_colors 12 12 --underline off --disable title font --color_blocks off"

# w3m
alias w3m='w3m -v'
w3mimg() { w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay "$1" ; }

# Frambebuffer screenshot
fbscrot() {
    [[ ! -z $1 ]] && fbdump | pnm2png > "$1" || echo "Error: no filename given."
}

# Preview markdown files (convert to html and open is browser)
markdown-view-html() {
    if [[ ! -z $1 ]]; then
        cmark -t html "$1" > /tmp/$1.html && $BROWSER /tmp/$1.html
    else
        echo "Error: no filename given."
    fi
}

# Clear Clipboard
cpw() {
    xsel -bc && echo "" | xsel -p
    #echo "Clipboard cleared."
}

# Create shell script
mksh() {
    if [[ ! -z $1 ]]; then
        touch "$1"
        echo "#!/bin/bash" > "$1"
        chmod +x "$1"
        $EDITOR "$1"
    else
        echo "Error: no filename given."
    fi
}

# Calculator
calc() {
    echo "Python calc (exit with Ctrl+D)"
    python2 -ic "from __future__ import division; from math import *; from random import *"
}

# countdown and stopwatch (http://superuser.com/a/611582)
countdown(){
   date1=$((`date +%s` + $1));
   while [ "$date1" -ge `date +%s` ]; do
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 1 # don't stress the CPU
   done
}
stopwatch(){
  date1=`date +%s`;
   while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
    sleep 1 # don't stress the CPU
   done
}

# Exract urls from OPML file (e.g.: youtube subscriptions)
#opml-extract() { awk 'BEGIN{RS=FS}/^xmlUrl/{print $2}' FS='"' $1 }

# vim: set syntax=sh filetype=sh :
