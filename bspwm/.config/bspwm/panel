#!/bin/bash

# ------------------------------------------------------
# Settings
# ------------------------------------------------------
# other settings (FIFO, name) are exported in .zprofile
# to be available system-wide all the time.

DIR_BSPWM=~/.config/bspwm
PANEL_HEIGHT=20
PANEL_FONT="-*-terminus-*-*-*-*-12-*-*-*-*-*-*-*"

# export the panel's height for bspwmrc
export PANEL_HEIGHT

# source the panel colors
. "$DIR_BSPWM/panel_colors/spcmd-arch"

# ------------------------------------------------------
# Panel
# ------------------------------------------------------

if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc subscribe report > "$PANEL_FIFO" &

# ------------------------------------------------------
#  Widgets for the Panel Bar
# ------------------------------------------------------

xtitle -t 90 -sf 'T%s' > "$PANEL_FIFO" &

# Refresh widgets in:
refresh_interval="60s"

# Mail widget
mail_widget() {
    while true; do
        mail_count=$(cat ~/.mutt/newmail_count)
        if [ "$mail_count" -gt 0 ]; then
            mail_count="%{F#ff3b3b}${mail_count}new"
        else
            mail_count=$mail_count
        fi
        echo "M$mail_count"
        sleep $refresh_interval
    done
}
mail_widget > "$PANEL_FIFO" &

# Volume widget
volume_widget() {
    while true; do
        level=$(amixer -M get Master | awk '/%/{gsub( /[][%]/,"" );print $(NF-2)}')
        state=$(amixer -M get Master | awk '/\[on|off\]/{gsub("[\\[\\]]","");print $NF}')
        if [ "$state" = "off" ]; then
            level="%{F#ff3b3b}$level"
        else
            level=$level
        fi
        echo "V$level"
        sleep $refresh_interval
    done
}
volume_widget > "$PANEL_FIFO" &

# Battery widget
battery_widget() {
    while true; do
        capacity=$(cat /sys/class/power_supply/BAT0/capacity)
        status=$(cat /sys/class/power_supply/BAT0/status)

        if [ "$status" != "Charging" ] && [ "$capacity" -le 30 ] && [ "$capacity" -gt 20 ]; then
            widget_cap="%{F#ffe490}$capacity"
        elif [ "$status" != "Charging" ] && [ "$capacity" -le 20 ]; then
            widget_cap="%{F#ff3b3b}$capacity"
        else
            widget_cap=$capacity
        fi

        if [ "$status" = "Charging" ]; then
            widget_status="Charging"
        else
            widget_status="Bat"
        fi

        echo "B${widget_status}: ${widget_cap}%"
        sleep $refresh_interval
    done
}
battery_widget > "$PANEL_FIFO" &

# Date and time widget
datetime_widget() {
    while true; do
        echo "S$(date +'%a %b %d, %H:%M')"
        sleep $refresh_interval
    done
}
datetime_widget > "$PANEL_FIFO" &


# Notes/reminder widget
notes_widget() {
    while true; do
        file_notes=~/Documents/bspwm_panel_notes.txt
        if [ -e "$file_notes" ]; then
            echo "N%{F#00fff0}notes %{F${COLOR_WIDGET_SEPARATOR}}|"
        else
            echo "N"
        fi
        sleep $refresh_interval
    done
}
notes_widget > "$PANEL_FIFO" &

# ------------------------------------------------------
# Widget commands (when clicking on them)
# ------------------------------------------------------

wcmd_titlebar_hide="$DIR_BSPWM/hide.sh hide"
wcmd_titlebar_unhide="$DIR_BSPWM/hide.sh unhide"
wcmd_titlebar_list_hidden="$DIR_BSPWM/hide.sh list"
wcmd_volume_toggle="$DIR_BSPWM/volume.sh toggle"
wcmd_volume_up="$DIR_BSPWM/volume.sh up"
wcmd_volume_down="$DIR_BSPWM/volume.sh down"
wcmd_volume_max="$DIR_BSPWM/volume.sh max"
wcmd_open_alsamixer="urxvtc -e alsamixer"
wcmd_open_calendar_current="$DIR_BSPWM/cal.sh current"
wcmd_open_calendar_next="$DIR_BSPWM/cal.sh next"
wcmd_open_calendar_prev="$DIR_BSPWM/cal.sh prev"
wcmd_open_notes='notify-send "$(cat ~/Documents/bspwm_panel_notes.txt)"'
wcmd_battery_time='notify-send "$(~/.config/bspwm/bat_acpi.sh timeleft)"'
wcmd_mail_open_mutt1="urxvtc -name mutt -e mutt -F ~/.mutt/account.1.muttrc; bspc desktop -f ^7"
wcmd_mail_open_mutt2="urxvtc -name mutt -e mutt -F ~/.mutt/account.2.muttrc; bspc desktop -f ^7"
wcmd_mail_gmailcheck="notify-send 'gmailcheck' 'Checking mail...'; $DIR_SCRIPTS/gmailcheck.sh; notify-send 'gmailcheck' 'Check done.'"
wcmd_unhide_window="$DIR_BSPWM/hide.sh unhide"

# ------------------------------------------------------
# Panel Bar (get information and format the widgets)
# ------------------------------------------------------

num_mon=$(bspc query -M | wc -l)

wm_info_array=("" "" "" "" "")

panel_bar() {
    while read -r line ; do
        case $line in
            S*)
                # clock
                sys="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            B*)
                # battery
                bat="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            M*)
                # email
                mail="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            V*)
                # volume
                volume="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            N*)
                # note/reminder
                note="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            T*)
                # xtitle
                title="%{F$COLOR_TITLE_FG}%{B$COLOR_TITLE_BG} ${line#?} %{B-}%{F-}"
                ;;
            H*)
                # hidden window indicator
                hidden="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            W*)
               # bspwm internal state
                wm_infos=""
                cur_mon=-1
                desktop_num=1

                IFS=':'
                set -- ${line#?}
                while [ $# -gt 0 ] ; do
                    item=$1
                    name=${item#?}

                    # desktop name prefix format
                    # use:  ${desktop_num}  for automatic numbering
                    desktop_name_prefix="${desktop_num}"

                    case $item in
                        M*)
                            # active monitor
                            cur_mon=$((cur_mon + 1))
                            wm_infos=""
                            if [ "$num_mon" -gt 1 ] ; then
                                wm_infos="$wm_infos%{F$COLOR_FOCUSED_MONITOR_FG}%{B$COLOR_FOCUSED_MONITOR_BG} ${name}> %{B-}%{F-}"
                            fi
                            ;;
                        m*)
                            # inactive monitor
                            cur_mon=$((cur_mon + 1))
                            wm_infos=""
                            if [ "$num_mon" -gt 1 ] ; then
                                wm_infos="$wm_infos%{F$COLOR_MONITOR_FG}%{B$COLOR_MONITOR_BG} ${name}> %{B-}%{F-}"
                            fi
                            ;;
                        O*)
                            # focused occupied desktop
                            wm_infos="$wm_infos%{F$COLOR_FOCUSED_OCCUPIED_FG}%{B$COLOR_FOCUSED_OCCUPIED_BG}%{A:bspc desktop -f ${name}:} ${desktop_name_prefix}${name} %{A}%{B-}%{F-}"
                            desktop_num=$((desktop_num + 1))
                            ;;
                        F*)
                            # focused free desktop
                            wm_infos="$wm_infos%{F$COLOR_FOCUSED_FREE_FG}%{B$COLOR_FOCUSED_FREE_BG}%{A:bspc desktop -f ${name}:} ${desktop_name_prefix}${name} %{A}%{B-}%{F-}"
                            desktop_num=$((desktop_num + 1))
                            ;;
                        U*)
                            # focused urgent desktop
                            wm_infos="$wm_infos%{F$COLOR_FOCUSED_URGENT_FG}%{B$COLOR_FOCUSED_URGENT_BG}%{A:bspc desktop -f ${name}:} ${desktop_name_prefix}${name} %{A}%{B-}%{F-}"
                            desktop_num=$((desktop_num + 1))
                            ;;
                        o*)
                            # occupied desktop
                            wm_infos="$wm_infos%{F$COLOR_OCCUPIED_FG}%{B$COLOR_OCCUPIED_BG}%{A:bspc desktop -f ${name}:} ${desktop_name_prefix}${name} %{A}%{B-}%{F-}"
                            desktop_num=$((desktop_num + 1))
                            ;;
                        f*)
                            # free desktop
                            wm_infos="$wm_infos%{F$COLOR_FREE_FG}%{B$COLOR_FREE_BG}%{A:bspc desktop -f ${name}:} ${desktop_name_prefix}${name} %{A}%{B-}%{F-}"
                            desktop_num=$((desktop_num + 1))
                            ;;
                        u*)
                            # urgent desktop
                            wm_infos="$wm_infos%{F$COLOR_URGENT_FG}%{B$COLOR_URGENT_BG}%{A:bspc desktop -f ${name}:} ${desktop_name_prefix}${name} %{A}%{B-}%{F-}"
                            desktop_num=$((desktop_num + 1))
                            ;;
                        L*)
                            # layout (tile, monocle)
                            wm_infos="$wm_infos %{F$COLOR_LAYOUT_FG}%{B$COLOR_LAYOUT_BG}[${name}]%{B-}%{F-}"
                            ;;
                        G*)
                            # flags (sticky, private, locked)
                            if [ "$name" ]; then
                                wm_infos="$wm_infos %{F$COLOR_LAYOUT_FG}%{B$COLOR_LAYOUT_BG}[${name}]%{B-}%{F-}"
                            fi
                            ;;

                    esac
                    shift
                    wm_info_array[cur_mon]="$wm_infos"
                done
                ;;
        esac

        # first monitor (default / laptop display)
        m1panel="%{l}${wm_info_array[0]}%{A:$wcmd_unhide_window:}${hidden}%{A} \
            %{c}%{A:$wcmd_titlebar_hide:}%{A2:$wcmd_titlebar_list_hidden:}%{A3:$wcmd_titlebar_unhide:}${title}%{A}%{A}%{A} \
            %{r}%{A:$wcmd_open_notes:}${note}%{A}%{A:$wcmd_mail_open_mutt1:}%{A2:$wcmd_mail_gmailcheck:}%{A3:$wcmd_mail_open_mutt2:}Mail:${mail}%{A}%{A}%{A}%{F${COLOR_WIDGET_SEPARATOR}}|%{F} %{A:$wcmd_volume_toggle:}%{A2:$wcmd_open_alsamixer:}%{A3:$wcmd_volume_max:}%{A4:$wcmd_volume_down:}%{A5:$wcmd_volume_up:}Vol:${volume}%{A}%{A}%{A}%{A}%{A}%{F${COLOR_WIDGET_SEPARATOR}}|%{A:$wcmd_battery_time:}${bat}%{A}%{F${COLOR_WIDGET_SEPARATOR}}|%{A:$wcmd_open_calendar_current:}%{A2:$wcmd_open_calendar_prev:}%{A3:$wcmd_open_calendar_next:}${sys}%{A}%{A}%{A}"

        # second monitor (external)
        m2panel="%{S+}%{l}${wm_info_array[1]}%{A:$wcmd_unhide_window:}${hidden}%{A} \
            %{c}%{A:$wcmd_titlebar_hide:}%{A2:$wcmd_titlebar_list_hidden:}%{A3:$wcmd_titlebar_unhide:}${title}%{A}%{A}%{A} \
            %{r}${sys}"

        # check monitor number and print the stuff
        if [ "$num_mon" -eq 1 ]; then
            printf "%s\n" "${m1panel}"
        else
            printf "%s\n" "${m1panel}${m2panel}"
        fi

    done
}

# ------------------------------------------------------
# Pipe stuff to the bar / Show widgets in the panel
# ------------------------------------------------------

panel_bar < "$PANEL_FIFO" | lemonbar -a 32 -n "$PANEL_WM_NAME" -g x$PANEL_HEIGHT -f "$PANEL_FONT" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" | sh &

# ------------------------------------------------------
# Takes care of fullscreen programs, prevents the panel
# to be above them.
# ------------------------------------------------------

wid=$(xdo id -a "$PANEL_WM_NAME")
tries_left=20
while [ -z "$wid" ] && [ "$tries_left" -gt 0 ] ; do
	sleep 0.05
	wid=$(xdo id -a "$PANEL_WM_NAME")
	tries_left=$((tries_left - 1))
done
[ -n "$wid" ] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait

# vim: set syntax=sh filetype=sh :
