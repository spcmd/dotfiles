#!/bin/bash

# ------------------------------------------------------
# Settings
# ------------------------------------------------------
# other settings (FIFO, name) are exported in .zprofile
# to be available system-wide all the time.

PANEL_HEIGHT=20
PANEL_FONT="-*-terminus-*-*-*-*-12-*-*-*-*-*-*-*"

export PANEL_HEIGHT PANEL_FONT

# panel colors
. ~/.config/bspwm/panel_colors/spcmd-arch

# ------------------------------------------------------
# Panel
# ------------------------------------------------------

if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
bspc subscribe report > "$PANEL_FIFO" &

# ------------------------------------------------------
#  Widgets for the Panel Bar
# ------------------------------------------------------

xtitle -sf 'T%s' > "$PANEL_FIFO" &

# Refresh widgets in:
refresh_interval="60s"

# Mail widget
mail_widget() {
    while true; do
        echo "M$(cat ~/.mutt/newmail_count)"
        sleep $refresh_interval
    done
}
mail_widget > "$PANEL_FIFO" &

# Volume widget
volume_widget() {
    while true; do
        echo "V$(amixer -M get Master | awk '/%/{gsub( /[][%]/,"" );print $5}' | head -n1)"
        sleep $refresh_interval
    done
}
volume_widget > "$PANEL_FIFO" &

# Battery widget
battery_widget() {
    while true; do
        capacity=$(cat /sys/class/power_supply/BAT0/capacity)
        status=$(cat /sys/class/power_supply/BAT0/status)

        if [[ $capacity -le 30 ]]; then
            widget_cap="%{F#ffe490}$capacity"
        elif [[ $capacity -le 20 ]]; then
            widget_cap="%{F#ff3b3b}$capacity"
        else
            widget_cap=$capacity
        fi

        if [[ $status = "Charging" ]]; then
            widget_status="Charging"
        else
            widget_status="Bat"
        fi

        echo "B${widget_status}: ${widget_cap}%"
        sleep $refresh_interval
    done
}
battery_widget > "$PANEL_FIFO" &

# Date and time widget
datetime_widget() {
    while true; do
        echo "S$(date +'%a %b %d, %H:%M')"
        sleep $refresh_interval
    done
}
datetime_widget > "$PANEL_FIFO" &

# ------------------------------------------------------
# Panel Bar (get information and format the widgets)
# ------------------------------------------------------

num_mon=$(bspc query -M | wc -l)

panel_bar() {
    while read -r line ; do
        case $line in
            S*)
                # clock output
                sys="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            B*)
                # battery output
                bat="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            M*)
                # email output
                mail="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            V*)
                # volume output
                volume="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
                ;;
            T*)
                # xtitle output
                title="%{F$COLOR_TITLE_FG}%{B$COLOR_TITLE_BG} ${line#?} %{B-}%{F-}"
                ;;
            W*)
                # bspwm's state
                wm=""
                IFS=':'
                set -- ${line#?}
                while [ $# -gt 0 ] ; do
                    item=$1
                    name=${item#?}
                    case $item in
                        [mM]*)
                            [ $num_mon -lt 2 ] && shift && continue
                            case $item in
                                m*)
                                    # monitor
                                    FG=$COLOR_MONITOR_FG
                                    BG=$COLOR_MONITOR_BG
                                    ;;
                                M*)
                                    # focused monitor
                                    FG=$COLOR_FOCUSED_MONITOR_FG
                                    BG=$COLOR_FOCUSED_MONITOR_BG
                                    ;;
                            esac
                            wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ${name}:} ${name} %{A}%{B-}%{F-}"
                            ;;
                        [fFoOuU]*)
                            case $item in
                                f*)
                                    # free desktop
                                    FG=$COLOR_FREE_FG
                                    BG=$COLOR_FREE_BG
                                    ;;
                                F*)
                                    # focused free desktop
                                    FG=$COLOR_FOCUSED_FREE_FG
                                    BG=$COLOR_FOCUSED_FREE_BG
                                    ;;
                                o*)
                                    # occupied desktop
                                    FG=$COLOR_OCCUPIED_FG
                                    BG=$COLOR_OCCUPIED_BG
                                    ;;
                                O*)
                                    # focused occupied desktop
                                    FG=$COLOR_FOCUSED_OCCUPIED_FG
                                    BG=$COLOR_FOCUSED_OCCUPIED_BG
                                    ;;
                                u*)
                                    # urgent desktop
                                    FG=$COLOR_URGENT_FG
                                    BG=$COLOR_URGENT_BG
                                    ;;
                                U*)
                                    # focused urgent desktop
                                    FG=$COLOR_FOCUSED_URGENT_FG
                                    BG=$COLOR_FOCUSED_URGENT_BG
                                    ;;
                            esac
                            wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc desktop -f ${name}:} ${name} %{A}%{B-}%{F-}"
                            ;;
                        #[LTG]*)
                        [L]*)
                            # layout, state and flags
                            wm="${wm}%{F$COLOR_STATE_FG}%{B$COLOR_STATE_BG} [${name}] %{B-}%{F-}"
                            ;;
                    esac
                    shift
                done
                ;;
        esac
        # Panel Bar formatting
        printf "%s\n" \
            "%{l}${wm} \
            %{c}${title} \
            %{r}Mail:${mail}%{F${COLOR_WIDGET_SEPARATOR}}|%{F} %{A:~/.config/bspwm/volume.sh toggle:}Vol:${volume}%{A}%{F${COLOR_WIDGET_SEPARATOR}}|%{F}${bat}%{F${COLOR_WIDGET_SEPARATOR}}|%{F}%{A:urxvtc -geometry 22x10 -name cal -hold -e cal -m:}${sys}%{A}"

    done
}

# ------------------------------------------------------
# Pipe stuff to the bar / Show widgets in the panel
# ------------------------------------------------------

panel_bar < "$PANEL_FIFO" | lemonbar -a 32 -n "$PANEL_WM_NAME" -g x$PANEL_HEIGHT -f "$PANEL_FONT" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" | sh &

# ------------------------------------------------------
# Panel
# ------------------------------------------------------

wid=$(xdo id -a "$PANEL_WM_NAME")
tries_left=20
while [ -z "$wid" -a "$tries_left" -gt 0 ] ; do
	sleep 0.05
	wid=$(xdo id -a "$PANEL_WM_NAME")
	tries_left=$((tries_left - 1))
done
[ -n "$wid" ] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
