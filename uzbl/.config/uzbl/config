# Config for the NEXT branch

# === Core settings ==========================================================

# common directory locations
set prefix      @(echo $UZBL_PREFIX)@
set data_home   @(echo $XDG_DATA_HOME/uzbl)@
set data_dirs   @(echo $(echo ${XDG_DATA_DIRS}|sed 's%:%/uzbl:%g')/uzbl)@
set cache_home  @(echo $XDG_CACHE_HOME/uzbl)@
set config_home @(echo $XDG_CONFIG_HOME/uzbl)@
set local_storage_path @data_home/databases/
set scripts_home @(echo $HOME/Scripts)@

# Interface paths.
set comm_dir   @([ -n "$XDG_RUNTIME_DIR" ] && echo "$XDG_RUNTIME_DIR/uzbl" || echo "/tmp/uzbl-$USER")@
set fifo_dir   @comm_dir
set socket_dir @comm_dir

# === General config aliases =================================================

# Config related events (use the event function):
# event MODE_CONFIG <mode> <key> = <value>
set mode_config     event MODE_CONFIG
# event ON_EVENT <EVENT_NAME> <command>
set on_event        event ON_EVENT
# event ON_SET   <key/glob> <command>
set on_set          event ON_SET
# event MODMAP <From> <To>
set modmap          event MODMAP
# event IGNORE_KEY <glob>
set ignore_key      event IGNORE_KEY

set set_mode        set mode
set set_status      set status_message

# Spawn path shortcuts. In spawn the first dir+path match is used in "dir1:dir2:dir3:executable"
set scripts_dir  @data_home:@data_dirs:@prefix/share/uzbl/examples/data:scripts
set scripts_custom_dir  @data_home/scripts/custom

# Search case-insensitive by default
search option case_insensitive

# === Hardcoded handlers =====================================================

set navigation_handler     spawn_sync @scripts_dir/scheme.py
#set request_handler        spawn_sync @scripts_dir/request.py
set authentication_handler spawn_sync @scripts_dir/auth.py
set download_handler       spawn_sync @scripts_dir/download.sh

# === Dynamic event handlers =================================================

#   What to do when a website wants to open a new window:
# Open link in new window
@on_event   NEW_WINDOW     spawn_sh 'uzbl-browser ${0:-"$0"}' %r
# Open in current window (also see the REQ_NEW_WINDOW event handler below)
#@on_event   NEW_WINDOW     uri %s
# Open in new tab. Other options are NEW_TAB_NEXT, NEW_BG_TAB and NEW_BG_TAB_NEXT.
#@on_event   NEW_WINDOW     event NEW_TAB %s

#   What to do when the user requests a new window:
# If your the NEW_WINDOW handler opens the uri in the current window, you'll
# probably want to change this handler to open a new window or tab.
@on_event   REQ_NEW_WINDOW event @- if (@embedded) "NEW_TAB"; else "NEW_WINDOW" -@ %s

# Load start handler
@on_event   LOAD_START     @set_status <span foreground="khaki">wait</span>
# Reset the keycmd on navigation
@on_event   LOAD_START     @set_mode

# Load commit handlers
@on_event   LOAD_COMMIT    @set_status <span foreground="green">recv</span>

# add some javascript to the page for other 'js' commands to access later.
@on_event   LOAD_COMMIT    js page string 'uzbl = {}'
@on_event   LOAD_COMMIT    js page file @scripts_dir/formfiller.js
@on_event   LOAD_COMMIT    js page file @scripts_dir/follow.js
@on_event   LOAD_COMMIT    js page file @scripts_dir/go_input.js
@on_event   LOAD_COMMIT    js page file @scripts_dir/navigation.js

# Userscripts/per-site-settings. See the script and the example configuration for details
#@on_event   LOAD_COMMIT    spawn @scripts_dir/per-site-settings.py @data_home/per-site-settings

# Load finish handlers
@on_event   LOAD_FINISH    @set_status <span foreground="gold">done</span>
@on_event   LOAD_FINISH    spawn @scripts_dir/history.sh

# Don't let input elements to steal the focus (problem when switching tabs)
# ! NOT WORKING!
#@on_event   LOAD_FINISH    event ESCAPE
#@on_event   FOCUS_GAINED   event ESCAPE

# Switch to insert mode if a (editable) html form is clicked
@on_event   FORM_ACTIVE    @set_mode insert
# Switch to insert mode if a (editable) html form gains focus
@on_event   FOCUS_ELEMENT  spawn_sh 'if [ "$0" = INPUT -o "$0" = TEXTAREA -o "$0" = SELECT ]; then echo "@set_mode insert" > $UZBL_FIFO; fi' %s
# Switch to command mode if anything else is clicked
@on_event   ROOT_ACTIVE    @set_mode command
# Clear input when the page or an element gains focus.
@on_event   ROOT_ACTIVE    event KEYCMD_CLEAR
@on_event   FOCUS_ELEMENT  event KEYCMD_CLEAR

@on_event   AUTHENTICATE   spawn @scripts_dir/auth.py "%1" "%2" "%3"

# Example CONFIG_CHANGED event handler
#@on_event  CONFIG_CHANGED print Config changed: %1 = %2

# Scroll percentage calculation
@on_event   SCROLL_VERT    set scroll_message \@<(function(curr, min, max, size){if(max == size) return '--'; var p=(curr/(max - size)); return Math.round(10000*p)/100;})(%1,%2,%3,%4)>\@%

# Userstyles
@on_event LOAD_COMMIT css add file://@config_home/styles/\@(s=\@<location.host>\@.css; [ -e @config_home/styles/$s ] || s=default.css; echo $s)\@

# === Behaviour and appearance ===============================================

# Custom CSS can be defined here, including link follower hint styles
css add file://@config_home/styles/default.css

# If WebKits builtin authentication dialog should be used, if enabling remember
# to disable external authentication handlers
set enable_builtin_auth 0

set forward_keys      0

set show_status       1
set status_top        0
set status_background #303030

set modcmd_style      weight="bold" foreground="red"
set keycmd_style      weight="light" foreground="red"
set prompt_style      foreground="grey"
set cursor_style      underline="single"
set completion_style  foreground="green"
set hint_style        weight="bold"

set mode_section      <span background="khaki" foreground="black">[\@[\@mode_indicator]\@]</span>
set keycmd_section    [<span \@prompt_style>\@[\@keycmd_prompt]\@</span><span \@modcmd_style>\@modcmd</span><span \@keycmd_style>\@keycmd</span><span \@completion_style>\@completion_list</span>]
set progress_section  <span foreground="#606060">\@[\@progress.output]\@</span>
set scroll_section    <span foreground="#606060">\@[\@scroll_message]\@</span>
set uri_section       <span foreground="\@< if(\@frozen) "#00BFFF"; else "#99FF66"; >\@">\@[\@uri]\@</span>
set name_section      <span foreground="khaki">\@[\@NAME]\@</span>
set status_section    <span foreground="orange">\@status_message</span>
set selected_section  <span foreground="#606060">\@[\@SELECTED_URI]\@</span>

set download_section  <span foreground="white">\@downloads</span>
set proxy_section     <span foreground="cyan">\@[\@proxy_url]\@</span>

set script_section      \@<if(\@enable_scripts) "<span foreground='#666'>[<span foreground='#99FF66'>js</span>]</span>"; else "<span foreground='#666'>[<span foreground='red'>js</span>]</span>"; >\@
#set script_section     <span foreground="#ccc">[js: </span><span foreground="orange">\@enable_scripts</span><span foreground="#ccc">]</span>

set status_format      <span font_family="monospace">@mode_section @keycmd_section @progress_section @name_section @status_section @script_section @scroll_section @selected_section @download_section</span>

set status_format_right <span font_family="monospace"><span foreground="#666">uri:</span> @uri_section</span>
set status_format_right <span font_family="monospace"><span foreground="#666">proxy:</span> @proxy_section <span foreground="#666">uri:</span> @uri_section</span>

set title_format_long \@keycmd_prompt \@raw_modcmd \@raw_keycmd \@TITLE - Uzbl browser <\@NAME> \@SELECTED_URI

# Progress bar config
# %d = done, %p = pending %c = percent done, %i = int done, %s = spinner,
# %t = percent pending, %o = int pending, %r = sprite scroll
set progress.width      8
set progress.format     [%d>%p]%c
set progress.done       =
set progress.pending


# === Key binding configuration ==============================================
# --- Internal modmapping and ignoring ---------------------------------------

#modmap <From>          <To>
@modmap <Control>       <Ctrl>
@modmap <ISO_Left_Tab>  <Shift-Tab>
@modmap <KP_Enter>      <Enter>

#ignore_key <glob>
@ignore_key <ISO_*>
@ignore_key <Shift>
@ignore_key <Multi_key>
@ignore_key <Mod1>
@ignore_key <Mod2>
@ignore_key <Mod4>

# --- Bind aliases -----------------------------------------------------------

# event MODE_BIND <mode> <bind cmd> = <command>
set mode_bind event MODE_BIND

# event BIND <bind cmd> = <command>
set bind      @mode_bind global

# Insert mode binding alias
set ibind     @mode_bind insert

# Command mode binding alias
set cbind     @mode_bind command

# Non-insert mode bindings alias (ebind for edit-bind).
set ebind     @mode_bind global,-insert

# --- Global & keycmd editing binds ------------------------------------------

# Resets keycmd and returns to default mode.
@on_event  ESCAPE    @set_mode
@on_event  ESCAPE    event KEYCMD_CLEAR
@on_event  ESCAPE    js page string uzbl.follow.clearHints()
@on_event  ESCAPE    search clear
@on_event  ESCAPE    js page string window.getSelection().removeAllRanges()
@bind   <Escape>     = event ESCAPE
@bind   <Ctrl>[      = event ESCAPE

# Commands for editing and traversing the keycmd.
@ebind  <Return>     = event KEYCMD_EXEC_CURRENT
@ebind  <Home>       = event SET_CURSOR_POS 0
@ebind  <End>        = event SET_CURSOR_POS -1
@ebind  <Left>       = event SET_CURSOR_POS -
@ebind  <Right>      = event SET_CURSOR_POS +
@ebind  <BackSpace>  = event KEYCMD_BACKSPACE
@ebind  <Delete>     = event KEYCMD_DELETE
@ebind  <Tab>        = event START_COMPLETION
# Readline-ish bindings.
@ebind  <Ctrl>w      = event KEYCMD_STRIP_WORD \ -./&?=
@ebind  <Ctrl>u      = event SET_KEYCMD
@ebind  <Ctrl>a      = event SET_CURSOR_POS 0
@ebind  <Ctrl>e      = event SET_CURSOR_POS -1

@ebind <Up>          = event HISTORY_PREV
@ebind <Down>        = event HISTORY_NEXT
@ebind <Ctrl>r<search:>_ = event HISTORY_SEARCH %s
set history_disable_easter_egg 1
# Keycmd injection/append examples.
#@ebind  <Ctrl>su = event INJECT_KEYCMD \@uri
#@ebind  <Ctrl>st = event INJECT_KEYCMD \@title
#@ebind  <Ctrl>du = event APPEND_KEYCMD \@uri
#@ebind  <Ctrl>dt = event APPEND_KEYCMD \@title

# --- Mouse bindings ---------------------------------------------------------

# Middle click open in new window
@bind  <Button2>  = spawn_sh 'if [ "$0" ]; then echo "event REQ_NEW_WINDOW $0" > "$UZBL_FIFO"; else echo "uri $(xclip -o | sed s/\\\@/%40/g)" > "$UZBL_FIFO"; fi' '\@SELECTED_URI'

# --- Keyboard bindings ------------------------------------------------------

# With this command you can enter in any command at runtime when prefixed with
# a colon.
@cbind    :_        = %s

# open a new window or a new tab (see the on_event NEW_WINDOW settings above)
@cbind  w            = event REQ_NEW_WINDOW

# Page movement binds
@cbind  j            = scroll vertical 20
@cbind  k            = scroll vertical -20
@cbind  <Ctrl>j      = scroll vertical 20%
@cbind  <Ctrl>k      = scroll vertical -20%
@cbind  h            = scroll horizontal -20
@cbind  l            = scroll horizontal 20
@cbind  gg           = scroll vertical begin
@cbind  G            = scroll vertical end


# Frozen binding
@cbind  <Shift><Ctrl>F  = toggle frozen

# Navigation binds
@cbind  ,   = back
@cbind  .   = forward
@cbind  gb  = uri \@< encodeURI(uzbl.navigation.prev()) >\@
@cbind  gf  = uri \@< encodeURI(uzbl.navigation.next()) >\@
@cbind  S   = stop
@cbind  r   = reload cached
@cbind  R   = reload full

# Zoom binds
@cbind  zi   = zoom in
@cbind  zo   = zoom out
@cbind  zz   = set zoom_level 1.0
@cbind  zt   = toggle zoom_text_only

# Appearance binds
#@cbind  t   = toggle show_status

# Page searching binds
@cbind  /*                           = search find %s
@cbind  <Ctrl>/<search:>_            = search find %s
@cbind  ?*                           = search rfind %s
@cbind  <Ctrl>?<'reverse search':>_  = search rfind %s
# Jump to next and previous items
@cbind  n   = search next
@cbind  N   = search prev

# Print pages to a printer
@cbind  <Ctrl>p = hardcopy page

# Web searching binds
@cbind  !g<Google:>_ = uri http://www.google.com/search?q=\@<encodeURIComponent(%r)>\@
@cbind  !d<DuckDuckGo:>_ = uri http://duckduckgo.com/?q=%s
@cbind  !aw<Archwiki:>_ = uri http://wiki.archlinux.org/index.php/Special:Search?search=\@<encodeURIComponent(%r)>\@&go=Go
@cbind  !w<Wikipedia:>_ = uri http://en.wikipedia.org/w/index.php?title=Special:Search&search=\@<encodeURIComponent(%r)>\@&go=Go

# Use socat to directly inject commands into uzbl-core and view events
# raised by uzbl-core:
@cbind  <Ctrl>t  = spawn_sh 'urxvtc -e socat unix-connect:"$UZBL_SOCKET" -'

# Uri opening prompts
#@cbind  o<uri:>_       = uri %s
# Or have it load the current uri into the keycmd for editing
@cbind  O<uri:\@uri>_  = uri %s

# Mode setting binds
@cbind  i        = @set_mode insert
@bind   <Ctrl>i  = @set_mode insert

# SSL-ify bindings
@cbind  zs  = uri \@(echo "$UZBL_URI" | sed -e 's/^http:/https:/')\@

# Yanking & pasting binds
@cbind  yy  = spawn_sh 'echo -n "$UZBL_URI" | xclip -selection clipboard'
@cbind  yu  = spawn_sh 'echo -n "$0" | xclip -selection clipboard' '\@SELECTED_URI'
@cbind  yn  = spawn_sh 'echo -n "$UZBL_TITLE" | xclip -selection clipboard'
@cbind  yh*  = spawn @scripts_custom_dir/follow.sh \@< uzbl.follow.followLinks("\@follow_hint_keys", "%s", 'returnuri') >\@ clipboard
#@cbind  ys  = spawn @scripts_custom_dir/follow.sh \@< uzbl.follow.followSelection('returnuri') >\@ clipboard

# Selection bindings
@cbind <Ctrl>a = js (function () { var r = document.createRange(), s = window.getSelection(); r.selectNodeContents(document); s.removeAllRanges(); s.addRange(r); })();
#@cbind <Ctrl>c = spawn_sh 'echo '\@< window.getSelection().toString().replace(/'/g, "\\'"); >\@' | xclip -selection clipboard'
@cbind <Ctrl>c = spawn_sh 'echo "\@< window.getSelection().toString(); >\@" | xclip -selection clipboard'

# Bookmark inserting binds
@cbind <Ctrl>m<tags:>_  = spawn_sh 'echo "$UZBL_URI	$0" >> "@data_home/bookmarks"' '%s'
# Or use a script to insert a bookmark.
@cbind  a  = spawn @scripts_dir/insert_bookmark.sh

# Menu (open url, bookmarks, history)
@cbind  b  = spawn @scripts_dir/load_url_from_bookmarks.sh
@cbind  o  = spawn @scripts_custom_dir/menu.sh 'current_tab'
@cbind  t  = spawn @scripts_custom_dir/menu.sh 'new_tab'

# Clear history file (keep only last 200 entry)
@cbind  :ch = spawn_sh "sed -i -e :a -e '$q;N;201,$D;ba' @data_home/history && notify-send 'uzbl' 'history cleared'"

# Link following (similar to vimperator and konqueror)
# Set custom keys you wish to use for navigation. Some common examples:
set follow_hint_keys hjklasdfgrtzu

# follow hint keys:
@cbind  f*  = spawn @scripts_custom_dir/follow.sh \@< uzbl.follow.followLinks("\@follow_hint_keys", "%s", 'click') >\@
@cbind  F*  = spawn @scripts_custom_dir/follow.sh \@< uzbl.follow.followLinks("\@follow_hint_keys", "%s", 'newwindow') >\@ newwindow
#@cbind  fL*  = spawn @scripts_custom_dir/follow.sh \@< uzbl.follow.followLinks("\@follow_hint_keys", "%s", 'returnuri') >\@ set
@cbind  m*  = spawn @scripts_custom_dir/follow.sh \@< uzbl.follow.followLinks("\@follow_hint_keys", "%s", 'returnuri') >\@ mediaplayer
@cbind  gi   = spawn @scripts_custom_dir/go_input.sh

# Form filler binds
# This script allows you to configure (per domain) values to fill in form
# fields (eg login information) and to fill in these values automatically.
# This implementation allows you to save multiple profiles for each form
# (think about multiple accounts on some website).
#set formfiller spawn @scripts_dir/formfiller.sh
#@cbind  xe  = @formfiller edit
#@cbind  xn  = @formfiller new
#@cbind  xl  = @formfiller load
#@cbind  xo  = @formfiller once

# --- Uzbl tabbed binds ------------------------------------------------------

# Tab opening
@cbind  T   = event NEW_TAB
@cbind  gh   = event NEW_TAB
#@cbind  t<tabopen:>_       = event NEW_TAB %s
#@cbind  gO<tabopen_next:>_       = event NEW_TAB_NEXT %s

# Closing / resetting
@cbind  d	= chain 'spawn @scripts_custom_dir/undo_save_exit.sh' 'spawn @scripts_custom_dir/exit_keep_last_tab.sh'
#@cbind  d	= spawn @scripts_custom_dir/exit_keep_last_tab.sh
@cbind  u   = spawn @scripts_custom_dir/undo_restore.sh
#@cbind  D   = event CLEAN_TABS
@cbind   q   = chain 'spawn @scripts_custom_dir/clear_cookies.sh' 'exit'
#@cbind   q   = exit
# Remove the tab undo list and kill all uzbl processes
#@cbind  q   = spawn_sh '[ -f /tmp/uzbl_undolist ] && rm /tmp/uzbl_undolist && killall uzbl-core || killall uzbl-core'

# Tab navigating
@cbind  ú   = event NEXT_TAB
@cbind  ő   = event PREV_TAB
@cbind  gt<go to tab:>_     = event GOTO_TAB %s
@cbind  é   = event MOVE_CURRENT_TAB_LEFT
@cbind  á   = event MOVE_CURRENT_TAB_RIGHT

# === Context menu items =====================================================

# Default context menu
menu add document "🔎 DuckDuckGo" "event NEW_TAB 'https://duckduckgo.com/?q=\@< window.getSelection().toString(); >\@'"
menu add document "🔎 Google" "event NEW_TAB 'https://google.com/search?q=\@< window.getSelection().toString(); >\@'"
#menu add_separator separator_1
#menu add link "Quit uzbl" exit

# Link context menu
menu add link "⯈ Open with mpv" "spawn @scripts_home/firefox-mpv \@SELECTED_URI"
menu add link "⭳ Download with Wget" 'spawn urxvtc -e sh -c "wget \@SELECTED_URI -O $XDG_DOWNLOAD_DIR/$(basename \@SELECTED_URI)"'
#menu add link "Print Link" "print \@SELECTED_URI"

# === Mode configuration =====================================================

# Define some mode specific uzbl configurations.
set command  @mode_config command
set insert   @mode_config insert
set stack    @mode_config stack

# Command mode config.
@command  keycmd_style        foreground="grey"
@command  status_background   #202020
@command  mode_indicator      Cmd
@command  keycmd_events       1
@command  forward_keys        0
@command  modcmd_updates      1

# Insert mode config.
@insert   status_background   #303030
@insert   mode_indicator      Ins
@insert   forward_keys        1
@insert   keycmd_events       0
@insert   modcmd_updates      0

# Multi-stage-binding mode config.
@stack    keycmd_style        foreground="#3dd"
@stack    status_background   #202020
@stack    mode_indicator      Bnd
@stack    prompt_style        foreground="#888" weight="light"
@stack    keycmd_events       1
@stack    modcmd_updates      1
@stack    forward_keys        0

set default_mode command

# === Useragent setup ========================================================

set useragent Mozilla/5.0 (X11; @(+uname -sm)@) AppleWebKit/602.1 (KHTML; like Gecko) Uzbl/@COMMIT

# === Configure cookie blacklist =============================================

#set cookie_policy never

# Accept 'session cookies' from uzbl.org (when you have a whitelist all other cookies are dropped)
event WHITELIST_COOKIE domain '(^|\.)archlinux\.org$' expires '^$'

# keep these cookies from these domains (delete all the others)
@cbind :ekc = spawn_sh "urxvtc -e vim $HOME/.local/share/uzbl/keep-cookies-domains.txt"

# Drop google analytics tracking cookies (applied after whitelists, if any)
#event BLACKLIST_COOKIE name '^__utm.$'

# === Javascript configuration  ==============================================

# Turn off javascript support
#set enable_scripts 0

# Noscript / Adblock
@on_event   LOAD_COMMIT  spawn @scripts_custom_dir/noscript.sh

# Toggle javascript for the site (add to / remove from whitelist)
@cbind !js = spawn @scripts_custom_dir/toggle_site_script.sh

# === Proxy configuration  ===================================================

# Direct uzbl at a proxy service (ex. privoxy)
# The trailing '#privoxy' part is for displaying purposes only (see proxy_section).
# Apparently it is ignored as far as actual operation is concerned.
# set proxy_url http://localhost:8118#privoxy

# === SSL related configuration ==============================================

# Set it to certificates store of your distribution, or your own CAfile.
set ssl_ca_file /etc/ssl/certs/ca-certificates.crt
set ssl_policy fail
# Command to toggle ssl_policy value:
@cbind  !ssl = chain 'toggle ssl_policy fail ignore' 'reload'
# Example SSL error handler:
@on_event   LOAD_ERROR    js page string 'if (/SSL handshake failed/.test("%3")) {alert ("%3");}'

# === Post-load misc commands ================================================
spawn_sync_exec @scripts_dir/load_cookies.sh
spawn_sync_exec @scripts_dir/load_cookies.sh @(echo "${UZBL_SESSION_COOKIE_FILE:-@data_home/session-cookies.txt}")@

# Set the "home" page.
#uri uzbl.org/doesitwork/@COMMIT
uri file://@config_home/newtab.html

# vim: set fdm=syntax:
